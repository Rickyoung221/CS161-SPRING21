; BFS TEST CASES
(print "BFS Test Cases")
(print "(BFS nil)")
(print (equal (BFS nil) nil))
(print "(BFS '(A))")
(print (equal (BFS '(A)) '(A)))
(print "(BFS '((A B) C D (E)))")
(print (equal (BFS '((A B) C D (E))) '(C D A B E)))
(print "(BFS '((A (B)) C (D)))")
(print (equal (BFS '((A (B)) C (D))) '(C A D B)))
(print "(BFS '((A ((B) C) D) (((E) F))))")
(print (equal (BFS '((A ((B) C) D) (((E) F)))) '(A D C F B E)))
(print "(BFS '((A ((B)) D) (((E) F))))")
(print (equal (BFS '((A ((B)) D) (((E) F)))) '(A D F B E)))
(print "(BFS '((((A))) ((((B))) ((C)))))")
(print (equal (BFS '((((A))) ((((B))) ((C))))) '(A C B)))
(print "(BFS '(((A (B) ((C))) (D (((E)) (F)) G))))")
(print (equal (BFS '(((A (B) ((C))) (D (((E)) (F)) G)))) '(A D G B C F E)))

; DFS TEST CASES
(print "DFS Test Cases")
(print "(DFS nil)")
(print (equal (DFS nil) nil))
(print "(DFS '(A))")
(print (equal (DFS '(A)) '(A)))
(print "(DFS '((A B) C D (E)))")
(print (equal (DFS '((A B) C D (E))) '(E D C B A)))
(print "(DFS '((A (B)) C (D)))")
(print (equal (DFS '((A (B)) C (D))) '(D C B A)))
(print "(DFS '((A ((B) C) D) (((E) F))))")
(print (equal (DFS '((A ((B) C) D) (((E) F)))) '(F E D C B A)))
(print "(DFS '((A ((B)) D) (((E) F))))")
(print (equal (DFS '((A ((B)) D) (((E) F)))) '(F E D B A)))
(print "(DFS '((((A))) ((((B))) ((C)))))")
(print (equal (DFS '((((A))) ((((B))) ((C))))) '(C B A)))
(print "(DFS '(((A (B) ((C))) (D (((E)) (F)) G))))")
(print (equal (DFS '(((A (B) ((C))) (D (((E)) (F)) G)))) '(G F E D C B A)))

; DFID TEST CASES
(print "DFID Test Cases")
(print "(DFID nil)")
(print (equal (DFID nil 0) nil))
(print "(DFID '(A) 1)")
(print (equal (DFID '(A) 1) '(A)))
(print "(DFID '((A B) C D (E)) 2)")
(print (equal (DFID '((A B) C D (E)) 2) '(C D A B C D E)))
(print "(DFID '((A (B)) C (D)) 3)")
(print (equal (DFID '((A (B)) C (D)) 3) '(C A C D A B C D)))
(print "(DFID '((A ((B) C) D) (((E) F))) 4)")
(print (equal (DFID '((A ((B) C) D) (((E) F))) 4) '(A D A C D F A B C D E F)))
(print "(DFID '((A ((B)) D) (((E) F))) 4)")
(print (equal (DFID '((A ((B)) D) (((E) F))) 4) '(A D A D F A B D E F)))
(print "(DFID '((((A))) ((((B))) ((C)))) 5)")
(print (equal (DFID '((((A))) ((((B))) ((C)))) 5) '(A C A B C)))
(print "(DFID '(((A (B) ((C))) (D (((E)) (F)) G))) 6)")
(print (equal (DFID '(((A (B) ((C))) (D (((E)) (F)) G))) 6) '(A D G A B D G A B C D F G A B C D E F G)))

; PUZZLE
(print "check puzzle")
(print (mc-dfs '(3 3 T) NIL) )
